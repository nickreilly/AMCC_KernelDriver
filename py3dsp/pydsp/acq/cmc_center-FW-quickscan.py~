"""
cmc_center-FW.py - a script to run in pydsp.
Center the filter wheel.  Take some data, get means, find half power points

To use, type: execuser filename
where filename is this file's name, but WITHOUT the .py
"""

from run import rd
import numpy
import xdir
import pyfits
import filterBase
import time

# Start about 20 fw below filter center and end 20 above.
FWstart = 810
FWend = 815 # 815
stepsize = 0.5

larger_window = [1085, 1275]
larger_window_size = 50
min_row, max_row = int(larger_window[1]), int(larger_window[1] + larger_window_size)
min_col, max_col = int(larger_window[0]), int(larger_window[0] + larger_window_size)
'''
print 'What is the starting FW position? (About 20 FWP below filter center)'
FWstart = float(raw_input())
print 'What is the ending FW position? (About 20 FWP above filter center)'
FWend = float(raw_input())
'''
#skip = 0.5 

rd.object = 'center-FW-quickscan'
larger_window = 100

# Get the image size for later use with statistics box
imgcol = rd.ncol
imgrow = rd.nrow

# for loops can't do less than 1 (integer) steps.  So, we need to double the
# start and end in range to do FW steps of 0.5  
#for newFWP in range(FWstart*2., FWend*2.):
for newFWP in np.arange(FWstart, FWend + stepsize, stepsize):
    # Open a file, using "a" = append mode
    wfile = open(xdir.get_objpath() + "/"+rd['object']+".txt", "a")
    
    # Move filter wheel.
    rd.fw = newFWP  # divide by 2 to get back to correct value.
    #srun()
    sscan() # Take an image, but do not save
    
    # recreate file name (duplicate code from runrun)
    scanfilename = xdir.get_objpath() + "/" + rd.bufferflag + ".fits"
    scanfile = pyfits.open(scanfilename)
    
    # These are FITS files. Get both the data and header.
    scandata = scanfile[0].data.astype('float64')
    #imgheader = scanfile[0].header

    window = np.mean(scandata[min_row:max_row, min_col:max_col])
    centerline = np.mean(scandata[1000:1100, :])

    # get the mean, should be center of array
    centervalue = scandata[(imgrow/2-25):(imgrow/2+25),(imgcol/2-25):(imgcol/2+25)].mean()
    largercenter = window #.mean()
    
    leftval = scandata[(imgrow/2-25):(imgrow/2+25),(imgcol/4-25):(imgcol/4+25)].mean()
    rightval = scandata[(imgrow/2-25):(imgrow/2+25),(imgcol*3/4-25):(imgcol*3/4+25)].mean()
    
    # Write the file
    wfile.write("%s\t%s \t%s \t%s center: \t%s centerline: \t%s\n" % (rd.fw, centervalue, leftval, rightval, largercenter, centerline)) 
    scanfile.close()
    wfile.close()


filterBase.set("cds") # put array back in dark
rd.itime = 11000
rd.object = 'test'
sscan()
crun()

