TITLE "PCI Interface PLD";
%  Author              Greg Burley / Drew Moore     %
%  Organization        OCIW / RIT                   %
%  Revision Level      4                            %
%  Target Device       EPM7128SQC100-7              %

% This file is written in AHDL.                     %
% It is a test version for the PCI board            %
% in the OCIW Scientific camera board set           %
% suitable for loopback testing                     %
% it connects the AMCC 5920 target interface chip   %
% and cypress FIFO to the LVDS                      %
% Modified 10/17/00 by Drew Moore, RIT				%
% to transmit and receive with start and stop bits	%
% instead of frame sync								%
% modified 5/30/01 by Drew Moore RIT                %
% to have HIGH stop bits and LOW start bits         %
% modified 6/22/01 by drew moore RIT				%
% to access FIFO in 3 regions.						%

INCLUDE "lpm_counter.inc"; % Altera library module, check \maxplus2\max2lib\mega_lpm %
INCLUDE "lpm_shiftreg.inc"; % likewise.. %

OPTIONS BIT0 = LSB; % "Normal" bit ordering. %

SUBDESIGN pci16
(
	DQ[23..0]									:BIDIR; % Add on BUS, AMCC PCI interface also FIFO out %
	CLK, /RESET, /EF, /FF, /HF 					:INPUT; % Main osc, SYSRST, Fifo empty/full/half full %
	RXD, RXCLK									:INPUT; % LVDS receive channel %
	PTWR, /PTADR, PTNUM[1..0], /DXFR			:INPUT; % control from PCI interface chip %
	TXD, TXCLK									:OUTPUT; % LVDS transmit channel %
	/WEN, WCLK, /REN, RCLK, /LD, /OE 			:OUTPUT; % FIFO control lines %
	/ADDINT, A0, A1								:OUTPUT; % A0, A1 unconnected.. diagnostic only %
	D[15..0] 									:OUTPUT; % drives FIFO data input %
)

VARIABLE
	DQBUS[23..0]								:TRI; % connects to DQ pins %
	RX_LD										:DFF;
	USE_HF										:DFF; % true if we should use Half full interrupt %
	D1WEN, D2WEN								:DFFE;
	TX_LD										:NODE;

	RXCNT	:LPM_COUNTER  WITH (LPM_WIDTH=6, LPM_DIRECTION="DOWN", LPM_SVALUE=B"00010000"); % receive counter %
	FCNT  	:LPM_COUNTER  WITH (LPM_WIDTH=16); % fifo counter. Tells how many words in fifo. %
	TSHIFT  :LPM_SHIFTREG WITH (LPM_WIDTH=17, LPM_DIRECTION="RIGHT"); % transmit shift register %
	RSHIFT  :LPM_SHIFTREG WITH (LPM_WIDTH=16, LPM_DIRECTION="RIGHT"); % receive shift register %

BEGIN
%	DEFINE CLOCK EQUIVALENTS AND BI_DIRECTIONAL BUS %
	TXCLK = CLK; % change transmit data on rising edge. %
	RCLK = !CLK; % Fifo read synched to local (add on) clock. %
	WCLK = RXCLK; % fifo write synched to receive clock (from dsp). %
	% WCLK clocks data to fifo on its rising edge. %
	% that means WEN (write enable) aka /RX_LD, should change on falling edge. %

	DQBUS[15..0].in = FCNT.q[15..0]; % only on-chip read is # of fifo entries. %
	DQBUS[23..16].in = GND; % ground the high bits to be nice. %
	DQBUS[].oe = (!PTWR & !/DXFR & (PTNUM[1..0]==B"11")); % read counter on pass thru region 3. ACM 6/22/01 %
	DQ[] = DQBUS[].out;  % send this data out. why no DQ[].oe term?? just a pin connection. %

% 	GENERATE RX FRAME_SYNC SIGNAL %
%	RX cnt gets set to 16 when the start bit comes in. 
	it has a non-zero state at every falling edge of incoming data.
	as the last data bit gets clocked, the RX counter finally goes to zero. %
	RXCNT.clock = !RXCLK; % clock it along with transmit shift register % 
	RXCNT.cnt_en = !RXCNT.eq[0]; % count down to zero and stop there. %
	RXCNT.sset = RXCNT.eq[0] & !RXD; % set counter to 16 on start bit. %
	RXCNT.aclr = !/RESET; % don't do anything on power up %

% 	GENERATE LOAD SIGNALS FOR TX_SHIFT REG AND RX SHIFT REG %
%	RX_LD goes active AS the last data bit is clocked. %
%	(the data to the fifo goes to its proper state when the last bit is clocked..) %
%	half a cycle after that, WCLK goes active (rising edge) which clocks the fifo. %
%	half a cycle after that, RX_LD goes inactive. % 
	RX_LD.clk = !RXCLK; % generate synchronous rx load. %
	RX_LD.d = RXCNT.eq[1]; % just before counter times out, pulse the FIFO write. %
	RX_LD.clrn = /RESET;

	TX_LD = ( PTWR & !/DXFR & (PTNUM[1..0]==B"00"));  %load tx on region 0 writes. %

% 	DEFINE TX AND RX SHIFT REGISTERS %
    TSHIFT.data[16..1] = DQ[15..0]; % DQ bus from PCI Chip %
	TSHIFT.data[0] = GND ;  % Plus the start bit. %
    TSHIFT.clock = CLK;  % 10 Mhz transmit clock..%
	TSHIFT.shiftin = VCC; % shift in a HIGH, meaning a stop bit.. %
	TSHIFT.load = TX_LD; % load on pass thru write to region 0 (sync issues? no, adclk!)%
	TSHIFT.aclr = !/RESET; % clear on power up, no biggie.. %
	TXD = TSHIFT.shiftout; % output of shift reg to LVDS %

   	RSHIFT.shiftin = RXD; % input from LVDS receiver %
    RSHIFT.clock = !RXCLK; % data changes on rising edge. clock on falling edge. %
    RSHIFT.enable = !RXCNT.eq[0]; % frame sync is active thru entire word %
	RSHIFT.aclr = !/RESET; % probably no big reason for this either. %
	D[] = RSHIFT.q[]; % send the receive shift register to the FIFO chip. %

% 	GENERATE READ_ENABLE AND WRITE_ENABLE SIGNALS FOR FIFO  %
% 	OUTPUT_ENABLE SIGNAL FOR FIFO, INTERRUPT FLAG           %

	/WEN = !RX_LD; % invert RX_LD, send to the FIFO write pin %

% read the fifo on region 0,1,or 2 reads. ACM, 6-22-01 %
	/REN = !(!PTWR & !/DXFR & ((PTNUM[1..0]==B"00")#(PTNUM[1..0]==B"01")#(PTNUM[1..0]==B"10"))); 
	/OE =  !(!PTWR & !/DXFR & ((PTNUM[1..0]==B"00")#(PTNUM[1..0]==B"01")#(PTNUM[1..0]==B"10"))); 

	USE_HF.clk = !CLK; % clock USE_HF flag on negative edge of addon clock. %
	USE_HF.d = (PTWR & !/DXFR & (PTNUM[1..0]==B"01") & (DQ[0])) % load USE_HF from D0 on region 1 writes. %
				# (!(PTWR & !/DXFR & (PTNUM[1..0]==B"01")) & USE_HF);  % remember it otherwise %
	USE_HF.clrn = /RESET; % and power up reset %

	/ADDINT = !((/EF & !USE_HF) # (!/HF & USE_HF)); % interrupt when not empty or half full. %

% DUMMY SIGNALS %
	/LD = !( PTWR & !/DXFR & (PTNUM[1..0]==B"11")); % load FIFO flag offset reg on writes to region 3 %
	A0	= /PTADR & /FF;  % ??? % 
	A1	= USE_HF;  % ??? % 

% 	SYNCHRONIZE /WEN FROM WCLK TO RCLK %
	D1WEN.d = VCC;	% synch set, asynch clear %
	D1WEN.clk = WCLK ; % wclk is possibly fast.. 80 mhz.. from DSP. %
	D1WEN.ena = !/WEN; % set this when WEN goes active %
	D1WEN.clrn = !D2WEN; % clear it when it gets to next stage.%

% Greg, the d input of this FF can change asynch to RCLK. any METASTABILITY worries?? %
	D2WEN.clk = RCLK; %  rclock is slow 10 MHZ local clock %
	D2WEN.d = D1WEN.q; % set when previous stage is active % 
	D2WEN.ena = VCC;

% 	SET UP THE FIFO COUNTER -- INCREMENT ON SYNCHED /WEN, DECREMENT ON /REN %
	FCNT.clock = RCLK; 
	FCNT.cnt_en = (!/REN $ D2WEN); % $ == XOR. count on either but not both. % 
	FCNT.clk_en = (!/REN # D2WEN); % clock on either %
	FCNT.updown = D2WEN;
	FCNT.aclr = !/RESET;
END;

